# This file is part of the eix project and distributed under the
# terms of the GNU General Public License v2.
#
# Copyright (c)
#  Wolfgang Frisch <xororand@users.sourceforge.net>
#  Emil Beinroth <emilbeinroth@gmx.net>
#  Martin VÃ¤th <vaeth@mathematik.uni-wuerzburg.de>

AC_INIT([eix], [0.17.1], [http://eix.sourceforge.net])
AC_CONFIG_AUX_DIR([config])
AC_CONFIG_FILES([Makefile manpage/Makefile src/Makefile doc/Makefile po/Makefile.in])
AC_CANONICAL_TARGET

AM_MAINTAINER_MODE
AM_CONFIG_HEADER([config.h])

# This must appear after option parsing and before automake's initialization.
# Its purpose is to ignore user-specified --disable-dependency-tracking
# unless the user also explicitly calls --disable-silent-rules.
# It is not nice that we do this, because it is only documented here
# (not even shown with ./configure --help).
# However, it seems necessary, because --disable-dependency-tracking
# is planned to be default in Gentoo's EAPI=3, and to my big regret
# this option does no good, because it makes silent rules worthless to
# some extent. Since I do not know a way to exclude this option completely
# (or only eliminate its negative effects),this hack ignores this option.
# Although this hack uses undocumented behaviour, it is not that hackish:
# It only sets a variable, so I suppose that the worst thing which can
# happen is that it is ignored...
AS_IF([test x"${enable_silent_rules}" != x'no'],
	[AS_CASE(["${enable_dependency_tracking}"],
		[yes], [],
		[no], [AC_MSG_WARN([Ignoring --disable-dependency-tracking as it interferes with silent rules])],
		[AC_MSG_NOTICE([Trying to enable dependency tracking for consistency with silent rules])])
	enable_dependency_tracking=yes])

AM_INIT_AUTOMAKE()
m4_ifdef([AM_SILENT_RULES],
	[AM_SILENT_RULES([yes])])

AC_LANG_CPLUSPLUS

AC_PROG_CXX
AC_USE_SYSTEM_EXTENSIONS

AC_PROG_LN_S

dnl Unfortunately, gettext requires libtool on some systems:
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
AM_GNU_GETTEXT_VERSION([0.17])
AM_GNU_GETTEXT([external])

dnl Provide basic types:
AC_TYPE_UINT8_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T

dnl Separate binaries?
AC_ARG_ENABLE([separate_binaries],
	[AS_HELP_STRING([--enable-separate-binaries],
		[create a separate binary for each program])],
	[AS_CASE(["${enableval}"],
		[yes], [separate_binaries=true],
		[no], [separate_binaries=false],
		[AC_MSG_ERROR([bad value ${enableval} for --enable-separate-binaries])])],
	[separate_binaries=false])
AM_CONDITIONAL([SEPARATE_BINARIES], [${separate_binaries}])

dnl Separate eix-update?
AC_ARG_ENABLE([separate_update],
	[AS_HELP_STRING([--enable-separate-update],
		[create a separate eix-update binary])],
	[AS_CASE(["${enableval}"],
		[yes], [separate_update=true],
		[no], [separate_update=false],
		[AC_MSG_ERROR([bad value ${enableval} for --enable-separate-update])])],
	[separate_update=false])
AS_IF([${separate_binaries}],
	[separate_update=true])
AM_CONDITIONAL([SEPARATE_UPDATE],
	[${separate_update}])

dnl Separate tools?
AC_ARG_ENABLE([separate_tools],
	[AS_HELP_STRING([--enable-separate-tools],
		[create separate binaries for tools (versionsort)])],
	[AS_CASE(["${enableval}"],
		[yes], [separate_tools=true],
		[no], [separate_tools=false],
		[AC_MSG_ERROR([bad value ${enableval} for --enable-separate-tools])])],
	[separate_tools=false])
AM_CONDITIONAL([SEPARATE_TOOLS],
	[${separate_tools}])

dnl Symlinks for obsolete names?
AC_ARG_ENABLE([obsolete_symlinks],
	[AS_HELP_STRING([--enable-obsolete-symlinks],
		[create a separate binary for each program])],
	[AS_CASE(["${enableval}"],
		[yes], [obsolete_symlinks=true],
		[no], [obsolete_symlinks=false],
		[AC_MSG_ERROR([bad value ${enableval} for --enable-obsolete-symlinks])])
	],[
		obsolete_symlinks=false
	])
AM_CONDITIONAL(OBSOLETE_SYMLINKS,
	[${obsolete_symlinks}])

dnl Wrappers for obsolete names?
AC_ARG_ENABLE([obsolete_reminder],
	[AS_HELP_STRING([--enable-obsolete-reminder],
		[create a separate binary for each program])],
	[AS_CASE(["${enableval}"],
		[yes], [obsolete_reminder=true],
		[no], [obsolete_reminder=false],
		[AC_MSG_ERROR([bad value ${enableval} for --enable-obsolete-reminder])])],
	[obsolete_reminder=false])
AM_CONDITIONAL([OBSOLETE_REMINDER],
	[${obsolete_reminder}])

dnl Look for basic functions:
AC_FUNC_FSEEKO
AC_CHECK_FUNCS([regcomp strchr strdup strerror strrchr fnmatch memset],
	[],
	[AC_MSG_ERROR([We really need this function ..])])

dnl Well define the following if we don't have one:
AC_CHECK_FUNCS([strndup strtoul strtol])

dnl We use these optionally:
AC_CHECK_FUNCS([canonicalize_file_name realpath vfork setenv])

dnl Optional header files:
AC_CHECK_HEADERS([sys/param.h])

dnl If climits exists, we need not check for limits.h
AC_CHECK_HEADERS([climits limits.h],
	[break])

dnl If tr1/cstdint exists we need not check for stdint.h.
AC_CHECK_HEADERS([tr1/cstdint cstdint stdint.h],
	[break])

dnl Standard programs:
AC_CHECK_PROGS([regex_cmd], [sed], [no])
AS_CASE(["${regex_cmd}"],
	[no], [AC_MSG_ERROR([sed is required])])

dnl Use bzip2?
AC_MSG_CHECKING([whether libbz2 should be used])
AC_ARG_WITH([bzip2],[AS_HELP_STRING([--with-bzip2],
	[Use libbz2 (required for detecting installed overlays)])],
	[AS_CASE(["${withval}"],
		[no], [use_bzlib=false
			AC_MSG_RESULT([no (on request)])],
		[use_bzlib=true])],
	[use_bzlib=''])
AS_IF([test x"${use_bzlib}" != x'false'],
	[BZLIB_LIBS='-lbz2'
	myoLIBS="${LIBS}"
	LIBS="${LIBS} ${BZLIB_LIBS}"
	AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#include <bzlib.h>
		]],
		[[
			BZ2_bzopen("dummy","rb");
		]])],
		[AS_IF([test -z "${use_bzlib}"],
			[AC_MSG_RESULT([yes (autodetected)])],
			[AC_MSG_RESULT([yes (on request)])])
		use_bzlib=true],
		[AC_MSG_RESULT([no (autodetected)])
		AS_IF([test -n "${use_bzlib}"],
			[AC_MSG_ERROR([bzip2 requested but libbz2 is unusable])])
		use_bzlib=false
		BZLIB_LIBS=''])
	LIBS="${myoLIBS}"])
AS_IF([${use_bzlib}],
	[AC_DEFINE([USE_BZLIB],
		[1],
		[ Define to 1 if bzlib can be used])])
AC_SUBST(BZLIB_LIBS)

dnl Use rst?
AC_ARG_WITH([rst],
	[AS_HELP_STRING([--with-rst],
		[Use rst2html.py to document cache file format in html])],
	[AS_CASE(["${withval}"],
		[no], [rst=false],
		[rst=true])],
	[rst=false])
AM_CONDITIONAL([USE_RST], [${rst}])

dnl Use obsoleted cache method?
AC_ARG_ENABLE([extra_cache],
	[AS_HELP_STRING([--enable-extra-cache],
		[enable unsupported cache method portage-2.1])],
	[AS_CASE(["${enableval}"],
		[yes], [extra_cache=true],
		[no], [extra_cache=false],
		[AC_MSG_ERROR([bad value ${enableval} for --enable-extra-cache])])],
	[extra_cache=false])
AS_IF([${extra_cache}],
	[AC_MSG_NOTICE([Unsupported cache method portage-2.1 enabled on request])])
AM_CONDITIONAL([EXTRA_CACHE],
	[${extra_cache}])

dnl Check if std::unique works
AC_MSG_CHECKING([whether std::unique seems to work])
AC_ARG_ENABLE([unique],
	[AS_HELP_STRING([--enable-unique],
		[assume that unique works])],
	[AS_CASE(["${enableval}"],
		[yes], [AC_MSG_RESULT([yes (skipped test)])
			unique_works=true],
		[no], [AC_MSG_RESULT([no (skipped test)])
			unique_works=false],
		[AC_MSG_ERROR([bad value ${enableval} for --enable-unique])])],
	[unique_works=''])
AS_IF([test -z "${unique_works}"],
	[AC_RUN_IFELSE([AC_LANG_PROGRAM([[
#include <vector>
#include <string>
#include <cstdlib>
#include <algorithm>
		]],
		[[
	const char *a[] = {
			"1", "2", "2", "3", "3", "4", "4", "5", NULL,
			"1", "1", "2", "3", "4", "5", "5", "5", NULL,
			"1", "2", "3", "4", "5", NULL,
			NULL };
	const char *b[]= {
			"1", "2", "3", "4", "5", NULL };
	typedef std::vector<std::string>::size_type ind;
	for(ind i = 0; a[i]; i++) {
		std::vector<std::string> t;
		while(a[i])
			t.push_back(a[i++]);
		t.erase(unique(t.begin(), t.end()), t.end());
		for(ind j = 0; ; j++) {
			if(j == t.size()) {
				if(b[j])
					return 1;
				break;
			}
			if(!b[j])
				return 1;
			if(t[j] != b[j])
				return 1;
		}
	}
		]])],
		[AC_MSG_RESULT([yes])
		unique_works=true],
		[AC_MSG_RESULT([no])
		unique_works=false],
		[AC_MSG_RESULT([assuming yes (crosscompile)])
		unique_works=true])])
AS_IF([${unique_works}],
	[AC_DEFINE([UNIQUE_WORKS],
		[1],
		[ Define to 1 if std::unique() works reliable])])

dnl What about sqlite?
AC_MSG_CHECKING([whether sqlite should be used])
AC_ARG_WITH([sqlite],
	[AS_HELP_STRING([--with-sqlite],
		[Compile in support for cache method sqlite])],
	[AS_CASE(["${withval}"],
		[no], [AC_MSG_RESULT([no (on request)])
			SQLITE_LIBS=''],
		[AC_MSG_RESULT([yes (on request)])
		command -v pkg-config >/dev/null 2>&1 \
			&& SQLITE_LIBS="`pkg-config --libs sqlite3`" \
			|| SQLITE_LIBS=''
		# If pkg-config is not available or failed, we use a default
		AS_IF([test -z "${SQLITE_LIBS}"],
			[AC_MSG_WARN([ignoring pkg-config and using -lsqlite3])
			SQLITE_LIBS='-lsqlite3'])])],
	[command -v pkg-config >/dev/null 2>&1 \
		&& SQLITE_LIBS="`pkg-config --libs sqlite3 2>/dev/null`" \
		|| SQLITE_LIBS=''
		AS_IF([test -n "${SQLITE_LIBS}"],
			[AC_MSG_RESULT([yes (autodetected)])],
			[AC_MSG_RESULT([no (autodetected)])])])
AS_IF([test -n "${SQLITE_LIBS}"],
	[AC_DEFINE([WITH_SQLITE],
		[1],
		[ Define to 1 if cache method sqlite is wanted])])
AC_SUBST([SQLITE_LIBS])


AC_ARG_WITH([portdir-cache-method],
	[AS_HELP_STRING([--with-portdir-cache-method=STR],
		[default PORTDIR_CACHE_METHOD])],
	[PORTDIR_CACHE_METHOD="${withval}"
	AC_MSG_NOTICE([Changing default: PORTDIR_CACHE_METHOD=${PORTDIR_CACHE_METHOD}])],
	[PORTDIR_CACHE_METHOD=metadata-flat])
AC_DEFINE_UNQUOTED([PORTDIR_CACHE_METHOD],
	["${PORTDIR_CACHE_METHOD}"],
	[ Default PORTDIR_CACHE_METHOD])
AC_SUBST([PORTDIR_CACHE_METHOD])

AC_ARG_WITH([eprefix-default],
	[AS_HELP_STRING([--with-eprefix-default=STR],
		[default EPREFIX])],
	[EPREFIX_DEFAULT="${withval}"
	AS_IF([test x"${EPREFIX_DEFAULT}" = x'/'],
		[EPREFIX_DEFAULT=''])
	AC_MSG_NOTICE([Changing default: EPREFIX=${EPREFIX_DEFAULT}])],
	[EPREFIX_DEFAULT=''])
AC_DEFINE_UNQUOTED([EPREFIX_DEFAULT],
	["${EPREFIX_DEFAULT}"],
	[ Default EPREFIX])
AC_SUBST([EPREFIX_DEFAULT])

AC_ARG_WITH([eix-prefix-default],
	[AS_HELP_STRING([--with-eix-prefix-default=STR],
		[default EIX_PREFIX])],
	[EIX_PREFIX_DEFAULT="${withval}"
		AS_IF([test x"${EIX_PREFIX_DEFAULT}" = x'/'],
			[EIX_PREFIX_DEFAULT=''])
		AC_MSG_NOTICE([Changing default: EIX_PREFIX=${EIX_PREFIX_DEFAULT}])],
	[EIX_PREFIX_DEFAULT=''])
AC_DEFINE_UNQUOTED([EIX_PREFIX_DEFAULT],
	["${EIX_PREFIX_DEFAULT}"],
	[ Default EIX_PREFIX])
AC_SUBST([EIX_PREFIX_DEFAULT])

AC_ARG_WITH([root-default],
	[AS_HELP_STRING([--with-root-default=STR],
		[default ROOT])],
	[ROOT_DEFAULT="${withval}"
		AS_IF([test x"${ROOT_DEFAULT}" = x'/'],
			[ROOT_DEFAULT=''])
		AC_MSG_NOTICE([Changing default: ROOT=${ROOT_DEFAULT}])],
	[ROOT_DEFAULT=''])
AC_DEFINE_UNQUOTED([ROOT_DEFAULT],
	["${ROOT_DEFAULT}"],
	[ Default ROOT])
AC_SUBST([ROOT_DEFAULT])

AC_MSG_CHECKING([for default of EXEC_EBUILD_SH])
AC_ARG_WITH([ebuild-sh-default],
	[AS_HELP_STRING([--with-ebuild-sh-default=STR],
		[default EXEC_EBUILD_SH])],
	[EBUILD_SH_DEFAULT="${withval}"
		description='on request'],
	[EBUILD_SH_DEFAULT='/usr/lib/portage/bin/ebuild.sh'
	AS_IF([! test -d "${EPREFIX_DEFAULT}/usr/lib" && \
		test -d "${EPREFIX_DEFAULT}/usr/lib64"],
		[EBUILD_SH_DEFAULT='/usr/lib64/portage/bin/ebuild.sh'])
	AS_IF([test -x "${EPREFIX_DEFAULT}${EBUILD_SH_DEFAULT}"],
		[description='autodetected'],
		[description='guessed'])])
AS_IF([test x"${EBUILD_SH_DEFAULT}" = x'/'],
	[EBUILD_SH_DEFAULT=''])
EBUILD_SH_MSG=${EBUILD_SH_DEFAULT}
AS_IF([test -z "${EBUILD_SH_MSG}"],
	[EBUILD_SH_MSG='""'])
AC_MSG_RESULT([${EBUILD_SH_MSG} (${description})])
AC_DEFINE_UNQUOTED([EBUILD_SH_DEFAULT],
	["${EBUILD_SH_DEFAULT}"],
	[ Default EXEC_EBUILD_SH (without prefix)])
AC_SUBST([EBUILD_SH_DEFAULT])

AC_ARG_WITH([portage-rootpath],
	[AS_HELP_STRING([--with-portage-rootpath=STR],
		[default PORTAGE_ROOTPATH])],
	[PORTAGE_ROOTPATH_DEFAULT="${withval}"
	AC_MSG_NOTICE([Using PORTAGE_ROOTPATH=${PORTAGE_ROOTPATH_DEFAULT}])],
	[PORTAGE_ROOTPATH_DEFAULT=''])
AC_DEFINE_UNQUOTED([PORTAGE_ROOTPATH_DEFAULT],
	["${PORTAGE_ROOTPATH_DEFAULT}"],
	[ Default PORTAGE_ROOTPATH])
AC_SUBST([PORTAGE_ROOTPATH_DEFAULT])

AC_ARG_WITH([portage-bin-path],
	[AS_HELP_STRING([--with-portage-bin-path=STR],
		[default PORTAGE_BIN_PATH])],
	[PORTAGE_BIN_PATH_DEFAULT="${withval}"
	AC_MSG_NOTICE([Using PORTAGE_BIN_PATH=${PORTAGE_BIN_PATH_DEFAULT}])],
	[PORTAGE_BIN_PATH_DEFAULT=''])

AC_DEFINE_UNQUOTED([PORTAGE_BIN_PATH_DEFAULT],
	["${PORTAGE_BIN_PATH_DEFAULT}"],
	[ Default PORTAGE_BIN_PATH])
AC_SUBST([PORTAGE_BIN_PATH_DEFAULT])


dnl Check endianess
AC_C_BIGENDIAN

AM_CFLAGS=''
AM_CXXFLAGS=''

EIX_CACHEFILE='/var/cache/eix'

AC_DEFINE_UNQUOTED([EIX_CACHEFILE],
	["${EIX_CACHEFILE}"],
	[ Location of the cachefile])

AC_DEFINE_UNQUOTED([LEVENSHTEIN_DISTANCE_DEFAULT],
	["2"],
	[ Default Levenshtein distance for matches (as string)])

AC_DEFINE_UNQUOTED([TARGET],
	["${target}"],
	[ Target system])

# AC_SUBST([EXTRA_CXXFLAGS])
AC_SUBST([EIX_CACHEFILE])
AC_SUBST([LEVENSHTEIN_DISTANCE])

AC_SUBST([PACKAGE_STRING])
AC_SUBST([AM_CXXFLAGS])

AS_IF([test -n "${GCC}"],
	[AC_MSG_CHECKING([gcc version])
	gcc_v=`${CC} -dumpversion`
	AC_DEFINE_UNQUOTED([GCC_VERSION],
		["${gcc_v}"],
		[ Version of gcc])
	AC_MSG_RESULT([${gcc_v}])])

dnl Done!
AC_OUTPUT

echo "

${PACKAGE}-${VERSION} configured successfully.

CC:       ${CC}
CXXFLAGS: ${CXXFLAGS}
LDFLAGS:  ${LDFLAGS}
"
